<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plan de Pruebas" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/Users/Henry/Documents/Escuela/5toITC/CalidadYPruebasDeSoftware/CalidadYPruebasDeSoftwareGit/Jmeter/lib</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Grupo de Hilos" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Bucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1504614067000</longProp>
        <longProp name="ThreadGroup.end_time">1504614067000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*
import java.util.regex.Pattern

MongoClient cli = new MongoClient(&quot;localhost&quot;,27017);

DB db = cli.getDB(&quot;prueba&quot;);

DBCollection coll = db.getCollection(&apos;zips&apos;);

StringBuilder result = new StringBuilder();

// Ciudades distintas
Object r = coll.distinct(&quot;city&quot;).size();
result.append(r.toString());
result.append(&quot;\n&quot;);

// Ciudades
Object r2 = coll.find().size();
result.append(r2.toString());
result.append(&quot;\n&quot;);

//Ciudades que no sean ADGER
BasicDBObject query = new BasicDBObject(&quot;city&quot;, new BasicDBObject(&apos;$ne&apos;, &quot;ADGER&quot;));
Cursor r3 = coll.find(query);
result.append(r3.size());
result.append(&quot;\n&quot;);

//Ciudades que comienzan con N
Pattern regex = Pattern.compile(&quot;^N&quot;,Pattern.CASE_INSENSITIVE);
BasicDBObject query2 = new BasicDBObject(&quot;city&quot;, regex);
DBCursor r4 = coll.find(query2);

while (r4.hasNext()) { 
	DBObject resw = r4.next();
	result.append(resw.toString()); 
}
result.append(&quot;\n&quot;);

//Menor CP
BasicDBObject sortq = new BasicDBObject(&quot;pop&quot;,1);
DBCursor r5 = coll.find().sort(sortq).limit(1);
result.append(&quot;Menor cp: &quot;);
while (r5.hasNext()) { 
	DBObject resw = r5.next();
	result.append(resw.toString()); 
}
result.append(&quot;\n&quot;);

//Mayor CP
BasicDBObject sortq2 = new BasicDBObject(&quot;pop&quot;,-1);
DBCursor r6 = coll.find().sort(sortq2).limit(1);
result.append(&quot;Mayor cp: &quot;);
while (r6.hasNext()) { 
	DBObject resw = r6.next();
	result.append(resw.toString()); 
}
result.append(&quot;\n&quot;);


//Mayor CP
BasicDBObject sortq3 = new BasicDBObject(&quot;this.city.length&quot;,-1);
DBCursor r7 = coll.find().sort(sortq3).limit(5);
result.append(&quot;Max length: &quot;);
while (r7.hasNext()) { 
	DBObject resw = r7.next();
	result.append(resw.toString()); 
}
result.append(&quot;\n&quot;);

//Menor letras
//db.zips.aggregate([{$project: {&quot;city&quot;: 1,&quot;field_length&quot;:{$strLenCP:&quot;$city&quot;}}},{$sort: {&quot;field_length&quot;: 1}},{$limit:1},{$project: {&quot;field_length&quot;: 0}}])

//Ciudades que contienen espacio
Pattern regex2 = Pattern.compile(&quot;\\s&quot;,Pattern.CASE_INSENSITIVE);
BasicDBObject query3 = new BasicDBObject(&quot;city&quot;, regex2);
DBCursor r8 = coll.find(query3);
result.append(&quot;\n&quot;);
result.append(&quot;\n&quot;);
result.append(&quot;Espacio: &quot;);
while (r8.hasNext()) { 
	DBObject resw = r8.next();
	result.append(resw.toString()); 
}
result.append(&quot;\n&quot;);

SampleResult.setResponseData(result.toString().getBytes());</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="Banco de Trabajo" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
